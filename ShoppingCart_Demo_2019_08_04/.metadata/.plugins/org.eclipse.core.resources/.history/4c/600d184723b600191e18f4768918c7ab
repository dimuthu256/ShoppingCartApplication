// Generated with g9.

package com.org.entities;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity(name="address")
public class Address implements Serializable {

    /** Primary key. */
    protected static final String PK = "id";

    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Column(unique=true, nullable=false, length=20)
    private long id;
    @Column(nullable=false, length=255)
    private String address1;
    @Column(length=255)
    private String address2;
    @Column(length=255)
    private String address3;
    @Column(length=255)
    private String address4;
    @Column(name="postal_code", length=255)
    private String postalCode;
    @Column(name="po_box", length=255)
    private String poBox;
    @Column(nullable=false, length=255)
    private String city;
    @Column(name="created_at", nullable=false)
    private Timestamp createdAt;
    @Column(name="updated_at", nullable=false)
    private Timestamp updatedAt;
    @Column(name="primary_address", nullable=false, length=1)
    private boolean primaryAddress;
    private String note;
    @Column(name="zip_code", length=255)
    private String zipCode;
    @Column(length=255)
    private String state;

    /** Default constructor. */
    public Address() {
        super();
    }

    /**
     * Access method for id.
     *
     * @return the current value of id
     */
    public long getId() {
        return id;
    }

    /**
     * Setter method for id.
     *
     * @param aId the new value for id
     */
    public void setId(long aId) {
        id = aId;
    }

    /**
     * Access method for address1.
     *
     * @return the current value of address1
     */
    public String getAddress1() {
        return address1;
    }

    /**
     * Setter method for address1.
     *
     * @param aAddress1 the new value for address1
     */
    public void setAddress1(String aAddress1) {
        address1 = aAddress1;
    }

    /**
     * Access method for address2.
     *
     * @return the current value of address2
     */
    public String getAddress2() {
        return address2;
    }

    /**
     * Setter method for address2.
     *
     * @param aAddress2 the new value for address2
     */
    public void setAddress2(String aAddress2) {
        address2 = aAddress2;
    }

    /**
     * Access method for address3.
     *
     * @return the current value of address3
     */
    public String getAddress3() {
        return address3;
    }

    /**
     * Setter method for address3.
     *
     * @param aAddress3 the new value for address3
     */
    public void setAddress3(String aAddress3) {
        address3 = aAddress3;
    }

    /**
     * Access method for address4.
     *
     * @return the current value of address4
     */
    public String getAddress4() {
        return address4;
    }

    /**
     * Setter method for address4.
     *
     * @param aAddress4 the new value for address4
     */
    public void setAddress4(String aAddress4) {
        address4 = aAddress4;
    }

    /**
     * Access method for postalCode.
     *
     * @return the current value of postalCode
     */
    public String getPostalCode() {
        return postalCode;
    }

    /**
     * Setter method for postalCode.
     *
     * @param aPostalCode the new value for postalCode
     */
    public void setPostalCode(String aPostalCode) {
        postalCode = aPostalCode;
    }

    /**
     * Access method for poBox.
     *
     * @return the current value of poBox
     */
    public String getPoBox() {
        return poBox;
    }

    /**
     * Setter method for poBox.
     *
     * @param aPoBox the new value for poBox
     */
    public void setPoBox(String aPoBox) {
        poBox = aPoBox;
    }

    /**
     * Access method for city.
     *
     * @return the current value of city
     */
    public String getCity() {
        return city;
    }

    /**
     * Setter method for city.
     *
     * @param aCity the new value for city
     */
    public void setCity(String aCity) {
        city = aCity;
    }

    /**
     * Access method for createdAt.
     *
     * @return the current value of createdAt
     */
    public Timestamp getCreatedAt() {
        return createdAt;
    }

    /**
     * Setter method for createdAt.
     *
     * @param aCreatedAt the new value for createdAt
     */
    public void setCreatedAt(Timestamp aCreatedAt) {
        createdAt = aCreatedAt;
    }

    /**
     * Access method for updatedAt.
     *
     * @return the current value of updatedAt
     */
    public Timestamp getUpdatedAt() {
        return updatedAt;
    }

    /**
     * Setter method for updatedAt.
     *
     * @param aUpdatedAt the new value for updatedAt
     */
    public void setUpdatedAt(Timestamp aUpdatedAt) {
        updatedAt = aUpdatedAt;
    }

    /**
     * Access method for primaryAddress.
     *
     * @return true if and only if primaryAddress is currently true
     */
    public boolean isPrimaryAddress() {
        return primaryAddress;
    }

    /**
     * Setter method for primaryAddress.
     *
     * @param aPrimaryAddress the new value for primaryAddress
     */
    public void setPrimaryAddress(boolean aPrimaryAddress) {
        primaryAddress = aPrimaryAddress;
    }

    /**
     * Access method for note.
     *
     * @return the current value of note
     */
    public String getNote() {
        return note;
    }

    /**
     * Setter method for note.
     *
     * @param aNote the new value for note
     */
    public void setNote(String aNote) {
        note = aNote;
    }

    /**
     * Access method for zipCode.
     *
     * @return the current value of zipCode
     */
    public String getZipCode() {
        return zipCode;
    }

    /**
     * Setter method for zipCode.
     *
     * @param aZipCode the new value for zipCode
     */
    public void setZipCode(String aZipCode) {
        zipCode = aZipCode;
    }

    /**
     * Access method for state.
     *
     * @return the current value of state
     */
    public String getState() {
        return state;
    }

    /**
     * Setter method for state.
     *
     * @param aState the new value for state
     */
    public void setState(String aState) {
        state = aState;
    }

    /**
     * Compares the key for this instance with another Address.
     *
     * @param other The object to compare to
     * @return True if other object is instance of class Address and the key objects are equal
     */
    private boolean equalKeys(Object other) {
        if (this==other) {
            return true;
        }
        if (!(other instanceof Address)) {
            return false;
        }
        Address that = (Address) other;
        if (this.getId() != that.getId()) {
            return false;
        }
        return true;
    }

    /**
     * Compares this instance with another Address.
     *
     * @param other The object to compare to
     * @return True if the objects are the same
     */
    @Override
    public boolean equals(Object other) {
        if (!(other instanceof Address)) return false;
        return this.equalKeys(other) && ((Address)other).equalKeys(this);
    }

    /**
     * Returns a hash code for this instance.
     *
     * @return Hash code
     */
    @Override
    public int hashCode() {
        int i;
        int result = 17;
        i = (int)(getId() ^ (getId()>>>32));
        result = 37*result + i;
        return result;
    }

    /**
     * Returns a debug-friendly String representation of this instance.
     *
     * @return String representation of this instance
     */
    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("[Address |");
        sb.append(" id=").append(getId());
        sb.append("]");
        return sb.toString();
    }

    /**
     * Return all elements of the primary key.
     *
     * @return Map of key names to values
     */
    public Map<String, Object> getPrimaryKey() {
        Map<String, Object> ret = new LinkedHashMap<String, Object>(6);
        ret.put("id", Long.valueOf(getId()));
        return ret;
    }

}
