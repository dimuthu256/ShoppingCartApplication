package com.org.shoppingcart.service.impl;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import org.springframework.web.client.RestTemplate;

import com.google.gson.Gson;
import com.org.shoppingcart.controller.util.REST_CONTROLLER_URL;
import com.org.shoppingcart.controller.util.ServiceManager;
import com.org.shoppingcart.dto.ProductDto;
import com.org.shoppingcart.request.ProductRequest;
import com.org.shoppingcart.response.ProductResponse;

public class ProductServiceImpl extends ServiceManager {

	private static final long serialVersionUID = 1L;

	public ProductResponse findAll() {
		try {
			restTemplate = new RestTemplate();
			String strResponse = restTemplate.getForObject(CONTEXT_PATH + REST_CONTROLLER_URL.GET_ALL_ITEMS,
					String.class);
			Gson gson = new Gson();
			return gson.fromJson(strResponse, ProductResponse.class);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ProductResponse();
	}
	
	public ProductResponse checkoutItems(ProductRequest productDtos) {
		try {
			URL obj = new URL(CONTEXT_PATH + REST_CONTROLLER_URL.SUBMIT_SELECTED_ITEMS);
			Gson gson = new Gson();
			HttpURLConnection postConnection = (HttpURLConnection) obj.openConnection();
			postConnection.setRequestMethod("POST");
			postConnection.setRequestProperty("Content-Type", "application/json");
			postConnection.setDoOutput(true);
			OutputStream os = postConnection.getOutputStream();
			os.write(gson.toJson(productDtos).getBytes());
			os.flush();
			os.close();

			int responseCode = postConnection.getResponseCode();
			if (responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(postConnection.getInputStream()));
				String inputLine;
				StringBuffer response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				// print result
				System.out.println(response.toString());
			} else {
				System.out.println("POST NOT WORKED");
			}
			if (responseCode == HttpURLConnection.HTTP_CREATED) { // success
				BufferedReader in = new BufferedReader(new InputStreamReader(postConnection.getInputStream()));
				String inputLine;
				StringBuffer response = new StringBuffer();
				while ((inputLine = in.readLine()) != null) {
					response.append(inputLine);
				}
				in.close();
				// print result
				System.out.println(response.toString());
				return gson.fromJson(response.toString(), ProductResponse.class);
			} else {
				System.out.println("POST NOT WORKED");
				return null;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	public ProductResponse checkoutItems(ProductRequest productDtos) {
		try {
			restTemplate = new RestTemplate();
			HttpHeaders headers = new HttpHeaders();
			headers.setContentType(MediaType.APPLICATION_JSON);
			Gson gson = new Gson();
			HttpEntity<ProductRequest> request = new HttpEntity<ProductRequest>(productDtos, headers);
			ProductResponse response = restTemplate.postForObject(CONTEXT_PATH + REST_CONTROLLER_URL.SUBMIT_SELECTED_ITEMS,
					request, ProductResponse.class);
			System.out.println(response);
			return response;
		} catch (Exception e) {
			String strResponse = restTemplate.postForObject(CONTEXT_PATH + REST_CONTROLLER_URL.SUBMIT_SELECTED_ITEMS,
					productDtos, String.class);
			Gson gson = new Gson();
			return gson.fromJson(strResponse, ProductResponse.class);
		}
	}
    **/
	
	public ProductDto find(int id) {
		ProductDto productDto = new ProductDto();
		productDto.setId(1);
		productDto.setName("item");
		productDto.setPrice(100);
		return productDto;
	}

}
