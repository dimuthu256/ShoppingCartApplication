// Generated with g9.

package com.inova.etf.entity.shopping.cart;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.LinkedHashMap;
import java.util.Map;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Index;
import javax.persistence.Table;

@Entity
@Table(name="orders", indexes={@Index(name="orders_ORDER_NUM_IX", columnList="ORDER_NUM", unique=true)})
public class Orders implements Serializable {

    /** Primary key. */
    protected static final String PK = "id";

    @Id
    @Column(name="ID", unique=true, nullable=false, length=50)
    private String id;
    @Column(name="AMOUNT", nullable=false, precision=22)
    private double amount;
    @Column(name="CUSTOMER_ADDRESS", nullable=false, length=255)
    private String customerAddress;
    @Column(name="CUSTOMER_EMAIL", nullable=false, length=128)
    private String customerEmail;
    @Column(name="CUSTOMER_NAME", nullable=false, length=255)
    private String customerName;
    @Column(name="CUSTOMER_PHONE", nullable=false, length=128)
    private String customerPhone;
    @Column(name="ORDER_DATE", nullable=false)
    private Timestamp orderDate;
    @Column(name="ORDER_NUM", unique=true, nullable=false, length=10)
    private int orderNum;

    /** Default constructor. */
    public Orders() {
        super();
    }

    /**
     * Access method for id.
     *
     * @return the current value of id
     */
    public String getId() {
        return id;
    }

    /**
     * Setter method for id.
     *
     * @param aId the new value for id
     */
    public void setId(String aId) {
        id = aId;
    }

    /**
     * Access method for amount.
     *
     * @return the current value of amount
     */
    public double getAmount() {
        return amount;
    }

    /**
     * Setter method for amount.
     *
     * @param aAmount the new value for amount
     */
    public void setAmount(double aAmount) {
        amount = aAmount;
    }

    /**
     * Access method for customerAddress.
     *
     * @return the current value of customerAddress
     */
    public String getCustomerAddress() {
        return customerAddress;
    }

    /**
     * Setter method for customerAddress.
     *
     * @param aCustomerAddress the new value for customerAddress
     */
    public void setCustomerAddress(String aCustomerAddress) {
        customerAddress = aCustomerAddress;
    }

    /**
     * Access method for customerEmail.
     *
     * @return the current value of customerEmail
     */
    public String getCustomerEmail() {
        return customerEmail;
    }

    /**
     * Setter method for customerEmail.
     *
     * @param aCustomerEmail the new value for customerEmail
     */
    public void setCustomerEmail(String aCustomerEmail) {
        customerEmail = aCustomerEmail;
    }

    /**
     * Access method for customerName.
     *
     * @return the current value of customerName
     */
    public String getCustomerName() {
        return customerName;
    }

    /**
     * Setter method for customerName.
     *
     * @param aCustomerName the new value for customerName
     */
    public void setCustomerName(String aCustomerName) {
        customerName = aCustomerName;
    }

    /**
     * Access method for customerPhone.
     *
     * @return the current value of customerPhone
     */
    public String getCustomerPhone() {
        return customerPhone;
    }

    /**
     * Setter method for customerPhone.
     *
     * @param aCustomerPhone the new value for customerPhone
     */
    public void setCustomerPhone(String aCustomerPhone) {
        customerPhone = aCustomerPhone;
    }

    /**
     * Access method for orderDate.
     *
     * @return the current value of orderDate
     */
    public Timestamp getOrderDate() {
        return orderDate;
    }

    /**
     * Setter method for orderDate.
     *
     * @param aOrderDate the new value for orderDate
     */
    public void setOrderDate(Timestamp aOrderDate) {
        orderDate = aOrderDate;
    }

    /**
     * Access method for orderNum.
     *
     * @return the current value of orderNum
     */
    public int getOrderNum() {
        return orderNum;
    }

    /**
     * Setter method for orderNum.
     *
     * @param aOrderNum the new value for orderNum
     */
    public void setOrderNum(int aOrderNum) {
        orderNum = aOrderNum;
    }

    /**
     * Compares the key for this instance with another Orders.
     *
     * @param other The object to compare to
     * @return True if other object is instance of class Orders and the key objects are equal
     */
    private boolean equalKeys(Object other) {
        if (this==other) {
            return true;
        }
        if (!(other instanceof Orders)) {
            return false;
        }
        Orders that = (Orders) other;
        Object myId = this.getId();
        Object yourId = that.getId();
        if (myId==null ? yourId!=null : !myId.equals(yourId)) {
            return false;
        }
        return true;
    }

    /**
     * Compares this instance with another Orders.
     *
     * @param other The object to compare to
     * @return True if the objects are the same
     */
    @Override
    public boolean equals(Object other) {
        if (!(other instanceof Orders)) return false;
        return this.equalKeys(other) && ((Orders)other).equalKeys(this);
    }

    /**
     * Returns a hash code for this instance.
     *
     * @return Hash code
     */
    @Override
    public int hashCode() {
        int i;
        int result = 17;
        if (getId() == null) {
            i = 0;
        } else {
            i = getId().hashCode();
        }
        result = 37*result + i;
        return result;
    }

    /**
     * Returns a debug-friendly String representation of this instance.
     *
     * @return String representation of this instance
     */
    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("[Orders |");
        sb.append(" id=").append(getId());
        sb.append("]");
        return sb.toString();
    }

    /**
     * Return all elements of the primary key.
     *
     * @return Map of key names to values
     */
    public Map<String, Object> getPrimaryKey() {
        Map<String, Object> ret = new LinkedHashMap<String, Object>(6);
        ret.put("id", getId());
        return ret;
    }

}
