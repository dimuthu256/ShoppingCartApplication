// Generated with g9.

package com.org.entities;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.OneToMany;

@Entity(name="products")
public class Products implements Serializable {

    /** Primary key. */
    protected static final String PK = "productCode";

    @Id
    @Column(name="PRODUCT_CODE", unique=true, nullable=false, length=20)
    private String productCode;
    @Column(name="IMAGE")
    private byte[] image;
    @Column(name="PRODUCT_NAME", nullable=false, length=255)
    private String productName;
    @Column(name="PRICE", nullable=false, precision=22)
    private double price;
    @Column(name="CREATE_DATE", nullable=false)
    private Timestamp createDate;
    @OneToMany(mappedBy="products")
    private Set<OrderDetails> orderDetails;

    /** Default constructor. */
    public Products() {
        super();
    }

    /**
     * Access method for productCode.
     *
     * @return the current value of productCode
     */
    public String getProductCode() {
        return productCode;
    }

    /**
     * Setter method for productCode.
     *
     * @param aProductCode the new value for productCode
     */
    public void setProductCode(String aProductCode) {
        productCode = aProductCode;
    }

    /**
     * Access method for image.
     *
     * @return the current value of image
     */
    public byte[] getImage() {
        return image;
    }

    /**
     * Setter method for image.
     *
     * @param aImage the new value for image
     */
    public void setImage(byte[] aImage) {
        image = aImage;
    }

    /**
     * Access method for productName.
     *
     * @return the current value of productName
     */
    public String getProductName() {
        return productName;
    }

    /**
     * Setter method for productName.
     *
     * @param aProductName the new value for productName
     */
    public void setProductName(String aProductName) {
        productName = aProductName;
    }

    /**
     * Access method for price.
     *
     * @return the current value of price
     */
    public double getPrice() {
        return price;
    }

    /**
     * Setter method for price.
     *
     * @param aPrice the new value for price
     */
    public void setPrice(double aPrice) {
        price = aPrice;
    }

    /**
     * Access method for createDate.
     *
     * @return the current value of createDate
     */
    public Timestamp getCreateDate() {
        return createDate;
    }

    /**
     * Setter method for createDate.
     *
     * @param aCreateDate the new value for createDate
     */
    public void setCreateDate(Timestamp aCreateDate) {
        createDate = aCreateDate;
    }

    /**
     * Access method for orderDetails.
     *
     * @return the current value of orderDetails
     */
    public Set<OrderDetails> getOrderDetails() {
        return orderDetails;
    }

    /**
     * Setter method for orderDetails.
     *
     * @param aOrderDetails the new value for orderDetails
     */
    public void setOrderDetails(Set<OrderDetails> aOrderDetails) {
        orderDetails = aOrderDetails;
    }

    /**
     * Compares the key for this instance with another Products.
     *
     * @param other The object to compare to
     * @return True if other object is instance of class Products and the key objects are equal
     */
    private boolean equalKeys(Object other) {
        if (this==other) {
            return true;
        }
        if (!(other instanceof Products)) {
            return false;
        }
        Products that = (Products) other;
        Object myProductCode = this.getProductCode();
        Object yourProductCode = that.getProductCode();
        if (myProductCode==null ? yourProductCode!=null : !myProductCode.equals(yourProductCode)) {
            return false;
        }
        return true;
    }

    /**
     * Compares this instance with another Products.
     *
     * @param other The object to compare to
     * @return True if the objects are the same
     */
    @Override
    public boolean equals(Object other) {
        if (!(other instanceof Products)) return false;
        return this.equalKeys(other) && ((Products)other).equalKeys(this);
    }

    /**
     * Returns a hash code for this instance.
     *
     * @return Hash code
     */
    @Override
    public int hashCode() {
        int i;
        int result = 17;
        if (getProductCode() == null) {
            i = 0;
        } else {
            i = getProductCode().hashCode();
        }
        result = 37*result + i;
        return result;
    }

    /**
     * Returns a debug-friendly String representation of this instance.
     *
     * @return String representation of this instance
     */
    @Override
    public String toString() {
        StringBuffer sb = new StringBuffer("[Products |");
        sb.append(" productCode=").append(getProductCode());
        sb.append("]");
        return sb.toString();
    }

    /**
     * Return all elements of the primary key.
     *
     * @return Map of key names to values
     */
    public Map<String, Object> getPrimaryKey() {
        Map<String, Object> ret = new LinkedHashMap<String, Object>(6);
        ret.put("productCode", getProductCode());
        return ret;
    }

}
